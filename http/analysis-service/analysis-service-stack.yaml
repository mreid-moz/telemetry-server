AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This deploys a service that allows users to spawn EC2 instances that they can
  use to analyze telemetry published data bucket. Users can also schedule
  analysis jobs to run via cron.

################################################################################

Parameters:

  ServerInstanceType:
    Description:              Server instance type
    Type:                     String
    Default:                  m1.small
    AllowedValues:
      - t2.micro
      - t2.medium
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - c1.medium
      - c1.xlarge
    ConstraintDescription:    Must be a valid EC2 instance type

  ServerAMI:
    Description:              AMI for the server web head instance
    Type:                     String
    Default:                  ami-a40bea97
    ConstraintDescription:    Must be a valid AMI in the current region

  # Currently, we just setup to consume from load balancer configured with
  # SSL certificate and DNS else where...telemetry-dash-lb
  AnalysisLoadBalancer:
    Description:              Load balancer setup with the correct DNS
    Type:                     String
    Default:                  telemetry-dash-lb

  #REMARK: We should consider removing KeyName as it shouldn't be possible to
  #        ssh in to the server instance
  KeyName:
    Description:              Name of key pair for SSH
    Type:                     String
    Default:                  mreid

  ServerSecret:
    Description:              Secret key for signing cookies on the server
    Type:                     String

  AnalysisSourcesBucket:
    Description:              Bucket containing sources and templates
    Type:                     String
    Default:                  telemetry-analysis-code

  SourcesVersion:
    Description:              Version of sources to load from sources bucket
    Type:                     String
    MinLength:                1
    ConstraintDescription:    Must not be empty

  AnalysisTemporaryBucket:
    Description:              Location where SSH Keys will be stored
    Type:                     String
    Default:                  telemetry-analysis-temp

  AnalysisPublicDataBucket:
    Description:              Bucket in which to publish public analysis results
    Type:                     String
    Default:                  telemetry-public-analysis

  AnalysisPrivateDataBucket:
    Description:              Bucket in which to publish private analysis results
    Type:                     String
    Default:                  telemetry-private-analysis

  AnalysisDatabaseURL:
    Description:              Database Connection URL
    Type:                     String
    Default:                  sqlite:///telemetry_analysis.db

  WorkerAMI:
    Description:              AMI to use for launching scheduled worker instances
    Type:                     String
    Default:                  ami-0057b733

  AnalysisDBSecurityGroup:
    Description:              EC2 Security group for connecting to Analysis Database
    Type:                     String
    Default:                  telemetry-analysis-db-sg

  AnalysisPrivateWorkerProfile:
    Description:              IAM Profile for private workers
    Type:                     String
    Default:                  telemetry-private-analysis-worker

  AnalysisPublicWorkerProfile:
    Description:              IAM Profile for public workers
    Type:                     String
    Default:                  telemetry-public-analysis-worker

  SparkEMRBucket:
    Description:              S3 Bucket containing Spark bootstrap resources
    Type:                     String
    MinLength:                1
    ConstraintDescription:    Must not be empty

  SparkInstanceProfile:
    Description:              IAM Profile for Spark workers
    Type:                     String
    MinLength:                1
    ConstraintDescription:    Must not be empty

################################################################################

Resources:
  # Security group for service server, http and ssh (well, disable ssh later)
  serverSecurityGroup:
    Type:                     AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:       telemetry-analysis service security group
      SecurityGroupIngress:
        - {IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0}
        - {IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0}

  # IAM role for service server
  serverInstanceIAMRole:
    Type:                     AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect:           Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path:                   /telemetry/analysis-service/
      Policies:
        - PolicyName:         startWorkerInstancesPolicy
          PolicyDocument:
            Statement:
              - Effect:       Allow
                Action:
                  - 'ec2:RunInstances'
                  - 'ec2:DescribeInstances'
                  - 'ec2:TerminateInstances'
                  - '*'     # try ec2:*
                Resource:     '*' # try: arn:aws:ec2:*
        - PolicyName:         putObjectTemporaryBucketPolicy
          PolicyDocument:
            Statement:
              - Effect:       Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - {'Fn::Join': ["", ['arn:aws:s3:::', {Ref: AnalysisTemporaryBucket}, '/*']]}
        - PolicyName:         getObjectSourcesBucketPolicy
          PolicyDocument:
            Statement:
              - Effect:       Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - {'Fn::Join': ["", [
                      'arn:aws:s3:::',
                      {Ref: AnalysisSourcesBucket},
                      '/v', {Ref: SourcesVersion}, '/telemetry-analysis-service.tar.gz'
                    ]]}

  # IAM instance profile granting serverInstanceIAMRole to service server
  serverInstanceProfile:
    Type:                     AWS::IAM::InstanceProfile
    DependsOn:
      - serverInstanceIAMRole
    Properties:
      Path:                   /telemetry/analysis-service/
      Roles:
        - {Ref: serverInstanceIAMRole}

  serverLaunchConfig:
    Type:                     AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - serverInstanceProfile
      - serverSecurityGroup
      - workerInstanceSecurityGroup
    Metadata:
      Comment:                telemetry-analysis-service
    Properties:
      KeyName:                {Ref: KeyName}
      ImageId:                {Ref: ServerAMI}
      InstanceType:           {Ref: ServerInstanceType}
      IamInstanceProfile:     {Ref: serverInstanceProfile}
      SecurityGroups:
        - {Ref: serverSecurityGroup}
        - {Ref: AnalysisDBSecurityGroup}
      UserData:               {'Fn::Base64': {'Fn::Join': ['', [
              "#!/bin/bash\n",
              "install()\n",
              "{\n",
              "    apt-get update\n",
              "    DEBIAN_FRONTEND=noninteractive apt-get -y \\\n",
              "        -o DPkg::Options::=--force-confdef \\\n",
              "        -o DPkg::Options::=--force-confold \\\n",
              "        install $@\n",
              "}\n",
              "install python-pip git python-psycopg2 python-dateutil python-dev nginx jq ntp python-protobuf python-snappy\n",
              "pip install --upgrade awscli boto fabric flask flask-login simplejson sqlalchemy uwsgi\n",
              # Forked from https://github.com/garbados/flask-browserid, modded
              # to support X-Forwarded-Proto header (so it can work behind ELB).
              "pip install git+https://github.com/mreid-moz/flask-browserid.git\n",
              "cd /home/ubuntu\n",
              "sudo -u ubuntu git clone https://github.com/mozilla/telemetry-server.git\n",
              "sudo -u ubuntu mkdir /home/ubuntu/telemetry_analysis\n",
              "cd /home/ubuntu/telemetry_analysis\n",
              "echo '# m h dom mon dow command' >> crontab.txt\n",
              "crontab -u ubuntu ./crontab.txt\n",
              "sudo -u ubuntu python - << END\n",
              "from boto.s3 import connect_to_region\n",
              "s3 = connect_to_region('", {Ref: 'AWS::Region'} ,"')\n",
              "b = s3.get_bucket('", {Ref: AnalysisSourcesBucket}, "', validate = False)\n",
              "k = b.get_key('v", {Ref: SourcesVersion}, "/telemetry-analysis-service.tar.gz')\n",
              "k.get_contents_to_filename('sources.tar.gz')\n",
              "END\n",
              "sudo -u ubuntu mkdir -p /home/ubuntu/.aws\n",
              "if [ ! -f /home/ubuntu/.aws/config ]; then\n",
              "  sudo -u ubuntu echo \"[default]\" > /home/ubuntu/.aws/config\n",
              "  sudo -u ubuntu echo \"region = ",  {Ref: 'AWS::Region'}, "\" >> /home/ubuntu/.aws/config\n",
              "fi\n",
              "sudo -u ubuntu tar -xzf sources.tar.gz\n",
              "echo '42 * * * * ubuntu /home/ubuntu/telemetry_analysis/terminate-expired-instances.py' >> /etc/crontab\n",
              "echo '' >> config.py\n",
              "echo \"SECRET_KEY = '", {Ref: ServerSecret} , "'\" >> config.py\n",
              "echo \"AWS_REGION = '", {Ref: 'AWS::Region'} , "'\" >> config.py\n",
              "echo \"WORKER_AMI = '", {Ref: WorkerAMI} , "'\" >> config.py\n",
              "echo \"WORKER_PRIVATE_PROFILE = '", {Ref: AnalysisPrivateWorkerProfile} , "'\" >> config.py\n",
              "echo \"WORKER_PUBLIC_PROFILE = '", {Ref: AnalysisPublicWorkerProfile} , "'\" >> config.py\n",
              "echo \"SPARK_INSTANCE_PROFILE = '", {Ref: SparkInstanceProfile} , "'\" >> config.py\n",
              "echo \"SPARK_EMR_BUCKET = '", {Ref: SparkEMRBucket} , "'\" >> config.py\n",
              "echo \"SECURITY_GROUPS = ['", {Ref: workerInstanceSecurityGroup} , "','", {Ref: AnalysisDBSecurityGroup}, "']\" >> config.py\n",
              # Workers get "Public" permissions by default
              "echo \"INSTANCE_PROFILE = '", {Ref: AnalysisPublicWorkerProfile} , "'\" >> config.py\n",
              "echo \"TEMPORARY_BUCKET = '", {Ref: AnalysisTemporaryBucket} , "'\" >> config.py\n",
              "echo \"CODE_BUCKET = '", {Ref: AnalysisSourcesBucket} , "'\" >> config.py\n",
              "echo \"PUBLIC_DATA_BUCKET = '", {Ref: AnalysisPublicDataBucket} , "'\" >> config.py\n",
              "echo \"PRIVATE_DATA_BUCKET = '", {Ref: AnalysisPrivateDataBucket} , "'\" >> config.py\n",
              "echo \"DB_URL = '", {Ref: AnalysisDatabaseURL} , "'\" >> config.py\n",
              "echo \"DEBUG = False\" >> config.py\n",
              "echo 'server {' > /etc/nginx/sites-enabled/default\n",
              "echo '        listen 80;' >> /etc/nginx/sites-enabled/default\n",
              "echo '        server_name analysisservice;' >> /etc/nginx/sites-enabled/default\n",
              "echo '        location / {' >> /etc/nginx/sites-enabled/default\n",
              "echo '                if ($http_x_forwarded_proto != \"https\") {' >> /etc/nginx/sites-enabled/default\n",
              "echo '                        rewrite ^ https://$host$request_uri? permanent;' >> /etc/nginx/sites-enabled/default\n",
              "echo '                }' >> /etc/nginx/sites-enabled/default\n",
              "echo '                try_files $uri @analysisservice;' >> /etc/nginx/sites-enabled/default\n",
              "echo '        }' >> /etc/nginx/sites-enabled/default\n",
              "echo '        location /status { try_files $uri @analysisservice; }' >> /etc/nginx/sites-enabled/default\n",
              "echo '        client_max_body_size 500m;' >> /etc/nginx/sites-enabled/default\n",
              "echo '        location @analysisservice {' >> /etc/nginx/sites-enabled/default\n",
              "echo '                include uwsgi_params;' >> /etc/nginx/sites-enabled/default\n",
              "echo '                uwsgi_pass unix:/tmp/uwsgi.sock;' >> /etc/nginx/sites-enabled/default\n",
              "echo '        }' >> /etc/nginx/sites-enabled/default\n",
              "echo '}' >> /etc/nginx/sites-enabled/default\n",
              "service nginx restart\n",
              "sudo -u ubuntu uwsgi --chmod-socket=666 -s /tmp/uwsgi.sock --logto /tmp/analysis-service.log -w server:app\n"
            ]
          ]
        }
      }

  serverAutoScaleGroup:
    Type:                       AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - serverLaunchConfig
    Properties:
      AvailabilityZones:        {'Fn::GetAZs': ''}
      LaunchConfigurationName:  {Ref: serverLaunchConfig}
      MinSize:                  1
      # NOTE: MaxSize MUST be 1. Each machine runs all the scheduled tasks, so
      # if we have multiple servers, each job will be run multiple times.
      MaxSize:                  1
      LoadBalancerNames:
        - {Ref: AnalysisLoadBalancer}
      Tags:
        - {Key: Name, Value: analysis.telemetry.mozilla.org, PropagateAtLaunch: true}
        - {Key: App, Value: pipeline, PropagateAtLaunch: true}
        - {Key: Type, Value: telemetry-analysis-dashboard, PropagateAtLaunch: true}
    # Support Rolling updates if/when we roll out changes
    UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstancesInService: "0"
          MaxBatchSize: "1"
          PauseTime: PT2M

################################################################################

  # Security group for worker instances, this should be s3 and ssh only
  workerInstanceSecurityGroup:
    Type:                     AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:       telemetry-analysis worker instance security group
      SecurityGroupIngress:
        - {IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0}
